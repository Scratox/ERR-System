{"version":3,"sources":["app.js"],"names":["express","require","passport","LocalStrategy","Strategy","session","app","use","urlencoded","extended","secret","resave","saveUninitialized","initialize","users","id","username","password","role","serializeUser","user","done","deserializeUser","find","u","message","get","req","res","sendFile","__dirname","post","authenticate","failureRedirect","redirect","isAuthenticated","send","logout","next","PORT","process","env","listen","console","log"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst passport = require('passport');\r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst session = require('express-session');\r\n\r\nconst app = express();\r\n\r\n// Use middleware to parse incoming request bodies\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Set up session management\r\napp.use(session({\r\n  secret: 'your-secret-key',\r\n  resave: false,\r\n  saveUninitialized: false,\r\n}));\r\n\r\n// Initialize Passport and restore authentication state from the session\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\n// In-memory database (replace this with a real database in a production environment)\r\nconst users = [\r\n  { id: 1, username: 'teacher', password: 'teacherpassword', role: 'teacher' },\r\n  { id: 2, username: 'student', password: 'studentpassword', role: 'student' },\r\n];\r\n\r\n// Serialize user information to store in the session\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\n// Deserialize user information from the session\r\npassport.deserializeUser((id, done) => {\r\n  const user = users.find(u => u.id === id);\r\n  done(null, user);\r\n});\r\n\r\n// Set up local strategy for username/password authentication\r\npassport.use(new LocalStrategy(\r\n  (username, password, done) => {\r\n    const user = users.find(u => u.username === username && u.password === password);\r\n    \r\n    if (!user) {\r\n      return done(null, false, { message: 'Incorrect username or password.' });\r\n    }\r\n\r\n    return done(null, user);\r\n  }\r\n));\r\n\r\n// Define routes\r\n\r\n// Login page\r\napp.get('/login', (req, res) => {\r\n  res.sendFile(__dirname + '/login.html');\r\n});\r\n\r\n// Process login form\r\napp.post('/login',\r\n  passport.authenticate('local', { failureRedirect: '/login' }),\r\n  (req, res) => {\r\n    // Redirect based on user role\r\n    if (req.user.role === 'teacher') {\r\n      res.redirect('/teacher');\r\n    } else if (req.user.role === 'student') {\r\n      res.redirect('/student');\r\n    }\r\n  }\r\n);\r\n\r\n// Teacher page\r\napp.get('/teacher', isAuthenticated('teacher'), (req, res) => {\r\n  res.send('Welcome, Teacher!');\r\n});\r\n\r\n// Student page\r\napp.get('/student', isAuthenticated('student'), (req, res) => {\r\n  res.send('Welcome, Student!');\r\n});\r\n\r\n// Logout\r\napp.get('/logout', (req, res) => {\r\n  req.logout();\r\n  res.redirect('/');\r\n});\r\n\r\n// Middleware to check if user is authenticated and has the correct role\r\nfunction isAuthenticated(role) {\r\n  return (req, res, next) => {\r\n    if (req.isAuthenticated() && req.user.role === role) {\r\n      return next();\r\n    }\r\n    res.redirect('/');\r\n  };\r\n}\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n"],"file":"app.dev.js"}