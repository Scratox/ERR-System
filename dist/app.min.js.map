{"version":3,"sources":["app.js"],"names":["express","require","passport","Strategy","session","app","extended","use","saveUninitialized","resave","initialize","password","role","id","username","res","redirect","req","next","isAuthenticated","user","done","users","find","u","LocalStrategy","deserializeUser","message","get","__dirname","post","authenticate","failureRedirect","sendFile","send","PORT","process","env","listen","console","log","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,cAAkBC,QAAA,kBAAxBE,SAGMC,QAAUH,QAAQ,mBAElBI,IAAML,UAFZK,IAAMD,IAAAA,QAAUH,WAAQ,CAAAK,UAAD,KAQvBD,IAAIE,IAAIH,QAAQ,CAHhBC,OAAQL,kBAAqBM,QAAQ,EAArCE,mBAEA,KAGEC,IAAAA,IAAMP,SAFQQ,cAGdF,IAAAA,IAAAA,SAAAA,WAIFH,IAAIE,MAAIL,CACRG,CAAIE,GAAIL,EAAAA,SAASE,UAEjBO,SAAA,kBAAAC,KAAA,WAGE,CAAEC,GAAI,EAAGC,SAAU,UAAWH,SAAU,kBAAmBC,KAAM,YA4DjEG,SAAIC,gBAAJJ,GAFF,OAKA,SAAAK,EAAAF,EAAAG,GAGI,GAAID,EAAIE,mBAAqBF,EAAIG,KAAKR,OAASA,EAFnD,OAASO,IAELJ,EAAIE,SAAIE,MAnEoBR,SAAAA,cAAU,SAAAS,EAAxCC,GAA2DT,EAAI,KAAEQ,EAAAP,MACnCF,SAAAA,gBAAU,SAAAE,EAAxCQ,GAFFA,EAKA,KAHmEC,MAAAC,KAAA,SAAAC,GAAA,OAAAA,EAAAX,KAAAA,OAMlEX,SAEDK,IAAA,IAAAkB,cAQE,SAACX,EAAUH,EAAUU,GAPvBnB,IAASwB,EAAAA,MAAAA,KAAgB,SAAAF,GAAA,OAAAA,EAACX,WAAaC,GAAAU,EAAAb,WAAAA,IACZ,OAAAS,EAahBC,EAAK,KAAMD,GAbpBC,EAAA,MAAA,EAAA,CAAAM,QAAA,uCAUItB,IAAAuB,IAAA,SAAY,SAAAX,EAAMF,GAASY,EAAAA,SAASE,UAAA,iBAGtCxB,IAAAyB,KAAOT,SARXnB,SAYA6B,aAAA,QAAA,CAAAC,gBAAA,WAEA,SAAAf,EAAAF,GACkB,YAAVE,EAAAG,KAARR,KACMqB,EAAAA,SAASJ,YAGf,YAAAZ,EAAAG,KAAAR,MAQMG,EAAIC,SAAS,cAFbD,IAAAA,IAAIC,WAASG,gBAAb,WAAA,SAAAF,EAAAF,GACDA,EAFDmB,KAEO,uBAYX7B,IAAIuB,IAAI,WAAYT,gBAAgB,WAAY,SAACF,EAAKF,GALtDV,EAAIuB,KAAI,uBAKRvB,IAAIuB,IAAI,UAAR,SAAoBT,EAAAA,GAClBJ,EAAImB,SADNnB,EAIAC,SAAA,OAaG,IALDmB,KAAAC,QAAAC,IAAAF,MAAA,IAMD9B,IAEDiC,OAAAH,KAAA,WAGEI,QAAQC,IAAR,yCAAAC,OAAqDN","file":"app.min.js","sourcesContent":["const express = require('express');\r\nconst passport = require('passport');\r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst session = require('express-session');\r\n\r\nconst app = express();\r\n\r\n// Use middleware to parse incoming request bodies\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Set up session management\r\napp.use(session({\r\n  secret: 'your-secret-key',\r\n  resave: false,\r\n  saveUninitialized: false,\r\n}));\r\n\r\n// Initialize Passport and restore authentication state from the session\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\n// In-memory database (replace this with a real database in a production environment)\r\nconst users = [\r\n  { id: 1, username: 'teacher', password: 'teacherpassword', role: 'teacher' },\r\n  { id: 2, username: 'student', password: 'studentpassword', role: 'student' },\r\n];\r\n\r\n// Serialize user information to store in the session\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\n// Deserialize user information from the session\r\npassport.deserializeUser((id, done) => {\r\n  const user = users.find(u => u.id === id);\r\n  done(null, user);\r\n});\r\n\r\n// Set up local strategy for username/password authentication\r\npassport.use(new LocalStrategy(\r\n  (username, password, done) => {\r\n    const user = users.find(u => u.username === username && u.password === password);\r\n    \r\n    if (!user) {\r\n      return done(null, false, { message: 'Incorrect username or password.' });\r\n    }\r\n\r\n    return done(null, user);\r\n  }\r\n));\r\n\r\n// Define routes\r\n\r\n// Login page\r\napp.get('/login', (req, res) => {\r\n  res.sendFile(__dirname + '/login.html');\r\n});\r\n\r\n// Process login form\r\napp.post('/login',\r\n  passport.authenticate('local', { failureRedirect: '/login' }),\r\n  (req, res) => {\r\n    // Redirect based on user role\r\n    if (req.user.role === 'teacher') {\r\n      res.redirect('/teacher');\r\n    } else if (req.user.role === 'student') {\r\n      res.redirect('/student');\r\n    }\r\n  }\r\n);\r\n\r\n// Teacher page\r\napp.get('/teacher', isAuthenticated('teacher'), (req, res) => {\r\n  res.send('Welcome, Teacher!');\r\n});\r\n\r\n// Student page\r\napp.get('/student', isAuthenticated('student'), (req, res) => {\r\n  res.send('Welcome, Student!');\r\n});\r\n\r\n// Logout\r\napp.get('/logout', (req, res) => {\r\n  req.logout();\r\n  res.redirect('/');\r\n});\r\n\r\n// Middleware to check if user is authenticated and has the correct role\r\nfunction isAuthenticated(role) {\r\n  return (req, res, next) => {\r\n    if (req.isAuthenticated() && req.user.role === role) {\r\n      return next();\r\n    }\r\n    res.redirect('/');\r\n  };\r\n}\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n"]}