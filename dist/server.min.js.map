{"version":3,"sources":["server.js"],"names":["express","require","bodyParser","mysql","app","PORT","env","set","json","extended","use","createPool","waitForConnections","connectionLimit","host","req","res","next","db","query","err","results","sql","getDepartmentsRadio","status","send","console","map","department","concat","DepartmentName","locals","radioButtons","join","getModulesDropdown","error","dropdownOptions","module","getTeachersDropdown","teacher","TeacherName","username","password","callback","log","user","post","body","authenticateUser","authenticatedUser","UserRole","redirect","get","data","render","nonNullValues","description","values","filter","toISOString","value","result","TeacherID","FeedbackText","_req$body2","FeedbackDate","ExamID","feedbackData","studentID","pool","listen"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst db = require('./db');\r\nconst mysql = require('mysql2');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 8888;\r\n\r\napp.use(express.static('public'));\r\napp.set('view engine', 'pug');\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\nconst pool = mysql.createPool({\r\n  host: '127.0.0.1',\r\n  user: 'root',\r\n  password: '',\r\n  database: 'examination_rectifier',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0\r\n});\r\n\r\n// Middleware to get departments radio buttons\r\nconst getDepartmentsRadio = (req, res, next) => {\r\n  const sql = 'SELECT DepartmentName FROM department';\r\n\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching departments:', err);\r\n      return res.status(500).send('Internal Server Error');\r\n    }\r\n\r\n    const radioButtons = results.map((department) => `\r\n      <input type=\"radio\" name=\"department\" value=\"${department.DepartmentName}\">\r\n      <label>${department.DepartmentName}</label>\r\n    `);\r\n\r\n    res.locals.getDepartmentsRadio = radioButtons.join('');\r\n    next();\r\n  });\r\n};\r\n\r\n// Middleware to get modules dropdown\r\nconst getModulesDropdown = (req, res, next) => {\r\n  const sql = 'SELECT ModuleName FROM modules';\r\n\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching modules:', err);\r\n      return res.status(500).send('Internal Server Error');\r\n    }\r\n\r\n    const dropdownOptions = results.map((module) => `\r\n      <option value=\"${module.ModuleName}\">${module.ModuleName}</option>\r\n    `);\r\n\r\n    res.locals.getModulesDropdown = `<select name=\"modules\">${dropdownOptions.join('')}</select>`;\r\n    next();\r\n  });\r\n};\r\n\r\n// Middleware to get teachers dropdown\r\nconst getTeachersDropdown = (req, res, next) => {\r\n  const sql = 'SELECT TeacherName FROM teachers';\r\n\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching teachers:', err);\r\n      return res.status(500).send('Internal Server Error');\r\n    }\r\n\r\n    const dropdownOptions = results.map((teacher) => `\r\n      <option value=\"${teacher.TeacherName}\">${teacher.TeacherName}</option>\r\n    `);\r\n\r\n    res.locals.getTeachersDropdown = `<select name=\"teachers\">${dropdownOptions.join('')}</select>`;\r\n    next();\r\n  });\r\n};\r\n\r\n// Authentication logic\r\nconst authenticateUser = (username, password, callback) => {\r\n  const sql = 'SELECT * FROM users WHERE Username = ? AND Password = ?';\r\n  db.query(sql, [username, password], (err, results) => {\r\n    if (err) {\r\n      console.error('Error during authentication:', err);\r\n      return callback(err, null);\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      console.log('User not found during authentication for username:', username);\r\n      return callback(null, null);\r\n    }\r\n\r\n    const user = results[0];\r\n    console.log('User found during authentication:', user);\r\n    callback(null, user);\r\n  });\r\n};\r\n\r\n// Login route\r\napp.post('/login', (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  authenticateUser(username, password, (err, authenticatedUser) => {\r\n    if (err) {\r\n      res.send('Error during authentication');\r\n    } else if (!authenticatedUser) {\r\n      res.send('Invalid credentials');\r\n    } else {\r\n      // Redirect based on user role\r\n      if (authenticatedUser.UserRole === 'Student') {\r\n        res.redirect('/student');\r\n      } else if (authenticatedUser.UserRole === 'Teacher') {\r\n        res.redirect('/teacher');\r\n      } else {\r\n        res.send('Invalid user role');\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n// Student dashboard\r\napp.get('/student', getDepartmentsRadio, getModulesDropdown, getTeachersDropdown, (req, res) => {\r\n  // Assuming you have middleware functions to provide data for departments, modules, and teachers\r\n  const data = {\r\n    getDepartmentsRadio: res.locals.getDepartmentsRadio,\r\n    getModulesDropdown: res.locals.getModulesDropdown,\r\n    getTeachersDropdown: res.locals.getTeachersDropdown,\r\n  };\r\n  res.render('student', data);\r\n});\r\n\r\n\r\n// Handle POST request to /submit-issue\r\napp.post('/submit-issue', (req, res) => {\r\n  const { description } = req.body;\r\n\r\n  // Assuming you have Status value available\r\n  const status = 'Pending'; // You can set the initial status as needed\r\n\r\n  // Get the current date and time for SubmissionDate\r\n  const submissionDate = new Date().toISOString();\r\n\r\n  // Insert data into problemsubmissions table with only non-null values\r\n  const sql = `\r\n    INSERT INTO problemsubmissions (ProblemDescription, SubmissionDate, Status)\r\n    VALUES (?, ?, ?)\r\n  `;\r\n\r\n  const values = [description, submissionDate, status];\r\n\r\n  // Filter out null or undefined values\r\n  const nonNullValues = values.filter(value => value !== null && value !== undefined);\r\n\r\n  db.query(sql, nonNullValues, (err, result) => {\r\n    if (err) {\r\n      console.error('Error inserting data into problemsubmissions table:', err);\r\n      res.status(500).send('Internal Server Error');\r\n    } else {\r\n      console.log('Data inserted successfully into problemsubmissions table');\r\n      res.send('Form submitted successfully');\r\n    }\r\n  });\r\n});\r\n\r\n// Teacher dashboard\r\napp.get('/teacher', (req, res) => {\r\n  db.query('SELECT * FROM problemsubmissions', (err, result) => {\r\n    if (err) {\r\n      console.error('Database query error:', err);\r\n      res.render('teacher', { result: null, error: 'Error during database query' });\r\n    } else {\r\n      res.render('teacher', { result });\r\n    }\r\n  });\r\n});\r\n\r\n// Index route\r\napp.get('/', (req, res) => {\r\n  res.render('index');\r\n});\r\n\r\n// Login route\r\napp.get('/login', (req, res) => {\r\n  res.render('login');\r\n});\r\n\r\napp.get('/submit-issue', (req, res) => {\r\n  res.render('student');\r\n});\r\n\r\napp.get('/feedback', (req, res) => {\r\n  res.render('feedback');\r\n});\r\napp.get('/submitted-feedback', (req, res) => {\r\n  res.render('submitted-feedback');\r\n});\r\n\r\napp.get('/home', (req, res) => {\r\n  res.render('home');\r\n});\r\n//for submitting feedback\r\napp.post('/feedback', (req, res) => {\r\n  const { StudentID, TeacherID, FeedbackText, FeedbackDate, ExamID } = req.body;\r\n\r\n  const sql = 'INSERT INTO feedback (StudentID, TeacherID, FeedbackText, FeedbackDate, ExamID) VALUES (?, ?, ?, ?, ?)';\r\n  const values = [StudentID, TeacherID, FeedbackText, FeedbackDate, ExamID];\r\n\r\n  pool.query(sql, values, (err, result) => {\r\n    if (err) {\r\n      console.error(err);\r\n      res.status(500).send('Internal Server Error');\r\n      return;\r\n    }\r\n\r\n    console.log('Feedback submitted successfully.');\r\n    res.redirect('/feedback');\r\n  });\r\n});\r\n\r\n//for viewing feedback\r\n\r\n// Route to view feedback for a specific student\r\napp.get('/submitted-feedback/:studentID', (req, res) => {\r\n  const studentID = req.params.studentID;\r\n\r\n  // Query to retrieve feedback based on StudentID\r\n  const sql = 'SELECT * FROM feedback WHERE StudentID = ?';\r\n  pool.query(sql, [studentID], (err, result) => {\r\n    if (err) {\r\n      console.error(err);\r\n      res.status(500).send('Internal Server Error');\r\n      return;\r\n    }\r\n\r\n    const feedbackData = result;\r\n\r\n    // Render the view-feedback page with the retrieved feedback data\r\n    res.render('submitted-feedback', { feedbackData });\r\n  });\r\n});\r\n\r\n\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n"]}