{"version":3,"sources":["server.js"],"names":["express","require","bodyParser","PORT","process","env","app","use","urlencoded","extended","req","res","next","db","query","err","results","getDepartmentsRadio","sql","error","status","send","radioButtons","map","department","concat","DepartmentName","locals","join","getModulesDropdown","console","dropdownOptions","module","ModuleName","teacher","getTeachersDropdown","TeacherName","authenticateUser","username","password","callback","length","log","user","post","body","authenticatedUser","role","redirect","data","get","result","render","stack","listen"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,WAAaD,QAAQ,eADrBD,GAAOC,QAAGA,QACVC,IAAAA,UAIAC,KAAOC,QAAQC,IAAIF,MAAQ,KAEjCG,IAAIC,IAAIP,QAAO,OAAQ,WAHvBM,IAAMA,IAAG,cAAT,OACAA,IAAMH,IAAID,WAAWG,QAErBC,IAAIC,IAAIP,WAAOQ,WAAQ,CAAAC,UAAvB,KAGAH,IAAIC,oBAAeC,SAAXE,EAAsBC,EAAAC,GAM5BC,GAAGC,MANqC,wCAM1B,SAACC,EAAKC,GAHhBC,GAAAA,EAGDH,OAFGI,QAAMC,MAAA,8BAAZJ,GAESG,EAAKE,OAAA,KAAAC,KAAML,yBAGhB,IAAAM,EAAkBN,EAAXO,IAAqB,SAAAC,GAAA,MAAA,wDAAAC,OAC7BD,EAAAE,eAD6B,qBAAAD,OAKnBD,EAAWE,eALQ,oBAGGf,EAAjCgB,OAAAV,oBAAAK,EAAAM,KAAA,IAKAjB,OAMEkB,mBAAqB,SAACnB,EAAKC,EAAKC,GAGpCC,GAAGC,MAHCe,iCAGU,SAAAd,EAAAC,GACZ,GAAID,EAEF,OADAe,QAAQX,MAAM,0BAA2BJ,GAClCJ,EAAIS,OAAO,KAAKC,KAAK,yBAG9B,IAAMU,EAAkBf,EAAQO,IAAI,SAAAS,GAAA,MAAA,0BAAAP,OAAAO,EAAAC,WAAA,MAAAR,OAAAO,EACjBA,WADiB,qBAKpCpB,EAAIe,OAAAE,mBAAJjB,0BAAAA,OAAImB,EAAAH,KAAA,IAAJhB,aAXFA,OAiBMM,oBAAM,SAAAR,EAAAC,EAAAC,GAIRkB,GAAAA,MAFJ,mCAEYX,SAAAA,EAAMH,GACd,GAAAD,EAAA,OACDe,QAAAX,MAAA,2BAAAJ,GADQJ,EAAIS,OAAO,KAAKC,KAAK,yBAGM,IAApCU,EAAAf,EAAAO,IAAA,SAAAW,GAAA,MAAA,0BAAAT,OAIWU,EAAAA,YAJX,MAAAV,OAIAS,EAAAE,YAJA,qBASJzB,EAAAgB,OAAAQ,oBAAA,2BAAAV,OAAAM,EAAAH,KAAA,IAAA,aAJIhB,OAQAyB,iBAAS,SAAAC,EAAAC,EAAAC,GAEP3B,GAAAC,MADQK,0DACDqB,CAAAA,EAAcD,GAArB,SAAAxB,EAAAC,GACD,GAAAD,EAED,OAJEe,QAAQX,MAAM,+BAAgCJ,GAI5CC,EAAAD,EAAmB,MAGtB,GAAA,IAAAC,EAAAyB,OAED,OAJEX,QAAQY,IAAI,qDAAsDJ,GAI1DE,EAAU,KAApB,MAXF,IAAAG,EAAA3B,EAAA,GAiBFc,QAAAY,IAAA,oCAAAC,GAJIH,EAAS,KAAMG,MAKcrC,IAAAsC,KACbL,SADa,SAAA7B,EAAAC,GACb4B,IAAAA,EAESA,EAAXM,KAAhBR,EAFkBE,EAElBF,SAAiBC,EAFCC,EAEDD,SAEb3B,iBAAS2B,EAAAC,EAAA,SAAAxB,EAAT+B,GADF/B,EAGEJ,EAAIU,KAAK,+BACJyB,EAIwBC,YAF7BD,EAEWA,KACTnC,EAAIqC,SAAS,YACR,YAAAF,EAAAC,KACLpC,EAAIU,SAAK,YAEZV,EAAAU,KAAA,qBARCV,EAAAU,KAAA,2BAgBFJ,IAAAA,IAAAA,WAAAA,oBAAgCA,mBADrBkB,oBAAA,SAAAzB,EAAAC,GAGXwB,IAAAA,EAAAA,CAHFlB,oBAAAN,EAAAgB,OAAAV,oBAKAN,mBAAsBsC,EAAtBtB,OAAAE,mBAGFM,oBAAAxB,EAAAgB,OAAAQ,qBACA7B,EAAI4C,OAAI,UAAYD,KAIdtC,IAAAA,IAAAA,WAAW,SAAAD,EAAXC,GAAwBwC,GAAAA,MAAAA,mCAAF,SAAApC,EAAAoC,GAAgBhC,GAAhBW,QAAtBX,MAAA,wBAAAJ,GAFFJ,EAAAyC,OAGO,UAAA,CAAAD,OAAA,KAAAhC,MAAA,iCACmBgC,EAAAA,OAAAA,UAAAA,CAAAA,OAAAA,QAM9B7C,IAAI4C,IAAI,IAAK,SAAAxC,EAAAC,GACXA,EAAIyC,OAAO,WAKXzC,IAAAA,IAAIyC,SAAO,SAAA1C,EAAXC,GADFA,EAAAyC,OAAA,WAMC9C,IAED4C,IAAA,gBAAA,SAAAxC,EAAAC,GAHEA,EAAIyC,OAAO,aAOZ9C,IAHDC,IAAA,SAAAQ,EAAAL,EAAAC,EAAAC,GAKAN,QAAAa,MAAAJ,EAAiBsC,OACfvB,EAAAA,OAAA,KAAAT,KAAA,2BADFf,IAAIgD,OAAOnD,KAAM,WACf2B,QAAQY,IAAR,yCAAAjB,OAAqDtB","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst db = require('./db');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 8888;\r\n\r\napp.use(express.static('public'));\r\napp.set('view engine', 'pug');\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n// Middleware to get departments radio buttons\r\nconst getDepartmentsRadio = (req, res, next) => {\r\n  const sql = 'SELECT DepartmentName FROM department';\r\n\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching departments:', err);\r\n      return res.status(500).send('Internal Server Error');\r\n    }\r\n\r\n    const radioButtons = results.map((department) => `\r\n      <input type=\"radio\" name=\"department\" value=\"${department.DepartmentName}\">\r\n      <label>${department.DepartmentName}</label>\r\n    `);\r\n\r\n    res.locals.getDepartmentsRadio = radioButtons.join('');\r\n    next();\r\n  });\r\n};\r\n\r\n// Middleware to get modules dropdown\r\nconst getModulesDropdown = (req, res, next) => {\r\n  const sql = 'SELECT ModuleName FROM modules';\r\n\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching modules:', err);\r\n      return res.status(500).send('Internal Server Error');\r\n    }\r\n\r\n    const dropdownOptions = results.map((module) => `\r\n      <option value=\"${module.ModuleName}\">${module.ModuleName}</option>\r\n    `);\r\n\r\n    res.locals.getModulesDropdown = `<select name=\"modules\">${dropdownOptions.join('')}</select>`;\r\n    next();\r\n  });\r\n};\r\n\r\n// Middleware to get teachers dropdown\r\nconst getTeachersDropdown = (req, res, next) => {\r\n  const sql = 'SELECT TeacherName FROM teachers';\r\n\r\n  db.query(sql, (err, results) => {\r\n    if (err) {\r\n      console.error('Error fetching teachers:', err);\r\n      return res.status(500).send('Internal Server Error');\r\n    }\r\n\r\n    const dropdownOptions = results.map((teacher) => `\r\n      <option value=\"${teacher.TeacherName}\">${teacher.TeacherName}</option>\r\n    `);\r\n\r\n    res.locals.getTeachersDropdown = `<select name=\"teachers\">${dropdownOptions.join('')}</select>`;\r\n    next();\r\n  });\r\n};\r\n\r\n// Authentication logic\r\nconst authenticateUser = (username, password, callback) => {\r\n  const sql = 'SELECT * FROM users WHERE Username = ? AND Password = ?';\r\n  db.query(sql, [username, password], (err, results) => {\r\n    if (err) {\r\n      console.error('Error during authentication:', err);\r\n      return callback(err, null);\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      console.log('User not found during authentication for username:', username);\r\n      return callback(null, null);\r\n    }\r\n\r\n    const user = results[0];\r\n    console.log('User found during authentication:', user);\r\n    callback(null, user);\r\n  });\r\n};\r\n\r\n// Login route\r\napp.post('/login', (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  authenticateUser(username, password, (err, authenticatedUser) => {\r\n    if (err) {\r\n      res.send('Error during authentication');\r\n    } else if (!authenticatedUser) {\r\n      res.send('Invalid credentials');\r\n    } else {\r\n      // Redirect based on user role\r\n      if (authenticatedUser.role === 'Student') {\r\n        res.redirect('/student');\r\n      } else if (authenticatedUser.role === 'Teacher') {\r\n        res.redirect('/teacher');\r\n      } else {\r\n        res.send('Invalid user role');\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n// Student dashboard\r\napp.get('/student', getDepartmentsRadio, getModulesDropdown, getTeachersDropdown, (req, res) => {\r\n  // Assuming you have middleware functions to provide data for departments, modules, and teachers\r\n  const data = {\r\n    getDepartmentsRadio: res.locals.getDepartmentsRadio,\r\n    getModulesDropdown: res.locals.getModulesDropdown,\r\n    getTeachersDropdown: res.locals.getTeachersDropdown,\r\n  };\r\n  res.render('student', data);\r\n});\r\n\r\n// Teacher dashboard\r\napp.get('/teacher', (req, res) => {\r\n  db.query('SELECT * FROM problemsubmissions', (err, result) => {\r\n    if (err) {\r\n      console.error('Database query error:', err);\r\n      res.render('teacher', { result: null, error: 'Error during database query' });\r\n    } else {\r\n      res.render('teacher', { result });\r\n    }\r\n  });\r\n});\r\n\r\n// Index route\r\napp.get('/', (req, res) => {\r\n  res.render('index');\r\n});\r\n\r\n// Login route\r\napp.get('/login', (req, res) => {\r\n  res.render('login');\r\n});\r\n\r\napp.get('/submit-issue', (req, res) => {\r\n  res.render('student');\r\n});\r\n\r\n// Error handling middleware\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).send('Something went wrong!');\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n"]}